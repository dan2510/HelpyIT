// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Modelos principales
model Rol {
  id          Int         @id @default(autoincrement())
  nombre      RoleNombre
  descripcion String      @db.VarChar(255)
  usuarios    Usuario[]
  
}

model Usuario {
  id                     Int      @id @default(autoincrement())
  correo                 String   @unique @db.VarChar(190)
  contrasenahash         String   @db.VarChar(255)
  nombrecompleto         String   @db.VarChar(120)
  telefono               String?  @db.VarChar(20)
  idrol                  Int
  activo                 Boolean  @default(true) @db.TinyInt
  ultimoiniciosesion     DateTime?
  creadoen               DateTime @default(now())
  actualizadoen          DateTime @default(now()) @updatedAt
  eliminadoen            DateTime? 
  disponibilidad         Disponibilidad @default(DISPONIBLE)
  cargaactual            Int      @default(0)
  maxticketsimultaneos   Int      @default(5)
  
  // Relaciones
  rol                    Rol      @relation(fields: [idrol], references: [id])
  tiquetesComoCliente    Tiquete[] @relation("ClienteTiquetes")
  tiquetesComoTecnico    Tiquete[] @relation("TecnicoTiquetes")
  especialidades         UsuarioEspecialidad[]
  asignaciones           AsignacionTiquete[]
  historialesCreados     HistorialTiquete[]
  imagenesSubidas        ImagenTiquete[]
  notificacionesDestino  Notificacion[] @relation("NotificacionDestino")
  notificacionesOrigen   Notificacion[] @relation("NotificacionOrigen")
  valoracionesCliente    ValoracionServicio[]
  
}

model Categoria {
  id           Int      @id @default(autoincrement())
  nombre       String   @db.VarChar(80)
  descripcion  String   @db.VarChar(255)
  idsla        Int
  activo       Boolean  @default(true) @db.TinyInt
  
  // Relaciones
  politicaSla  PoliticaSla @relation(fields: [idsla], references: [id])
  tiquetes     Tiquete[]
  especialidades CategoriaEspecialidad[]
  etiquetas    CategoriaEtiqueta[]
  
 
}

model Especialidad {
  id          Int      @id @default(autoincrement()) 
  nombre      String   @db.VarChar(80)
  descripcion String   @db.VarChar(255)
  activo      Boolean  @default(true) @db.TinyInt
  
  // Relaciones
  usuarios    UsuarioEspecialidad[]
  categorias  CategoriaEspecialidad[]
  

}

model Etiqueta {
  id          Int      @id @default(autoincrement())
  nombre      String   @db.VarChar(60)
  descripcion String   @db.VarChar(255)
  
  // Relaciones
  categorias  CategoriaEtiqueta[]
  

}

model PoliticaSla {
  id                    Int      @id @default(autoincrement())
  nombre                String   @db.VarChar(100)
  descripcion           String   @db.VarChar(255)
  maxminutosrespuesta   Int      
  maxminutosresolucion  Int      
  activo                Boolean  @default(true) @db.TinyInt
  vigentedesde          DateTime @db.Date
  vigentehasta          DateTime @db.Date
  creadoen              DateTime @default(now())
  actualizadoen         DateTime @default(now())
  
  // Relaciones
  categorias            Categoria[]
  
}

model ReglaAsignacion {
  id                   Int      @id @default(autoincrement())
  nombre               String   @db.VarChar(100)
  descripcion          String   @db.VarChar(255)
  activa               Boolean  @default(true) @db.TinyInt
  pesoprioridad        Int     
  pesoslarestante      Int      
  pesocargaactual      Int      
  pesoexperiencia      Int     
  prioridadejecucion   Int     
  creadoen             DateTime @default(now())
  actualizadoen        DateTime @default(now()) @updatedAt
  eliminadoen          DateTime?
  
  // Relaciones
  asignaciones         AsignacionTiquete[]
  
 
}

model Tiquete {
  id                     Int      @id @default(autoincrement())
  titulo                 String   @db.VarChar(140)
  descripcion            String   @db.Text
  prioridad              Prioridad @default(MEDIA)
  estado                 EstadoTiquete @default(ABIERTO)
  idcategoria            Int
  idcliente              Int
  idtecnicoactual        Int?
  creadoen               DateTime @default(now())
  primerarespuestaen     DateTime? 
  resueltoen             DateTime? 
  cerradoen              DateTime?
  vencerespuesta         DateTime 
  venceresolucion        DateTime 
  cumplioslarespuesta    Boolean? 
  cumplioslaresolucion   Boolean?
  
  // Relaciones
  categoria              Categoria @relation(fields: [idcategoria], references: [id])
  cliente                Usuario @relation("ClienteTiquetes", fields: [idcliente], references: [id])
  tecnicoActual          Usuario? @relation("TecnicoTiquetes", fields: [idtecnicoactual], references: [id])
  asignaciones           AsignacionTiquete[]
  historiales            HistorialTiquete[]
  notificaciones         Notificacion[]
  valoraciones           ValoracionServicio[]
  

}

model AsignacionTiquete {
  idasignacion       Int      @id @default(autoincrement())
  idtiquete          Int
  idtecnico          Int
  idregla            Int?
  metodo             MetodoAsignacion @default(MANUAL)
  justificacion      String?  @db.Text
  puntajeasignacion  Int?     
  asignadopor        Int     
  asignadoen         DateTime @default(now())
  
  // Relaciones
  tiquete            Tiquete @relation(fields: [idtiquete], references: [id])
  tecnico            Usuario @relation(fields: [idtecnico], references: [id])
  regla              ReglaAsignacion? @relation(fields: [idregla], references: [id])
  

}

model HistorialTiquete {
  id             Int      @id @default(autoincrement())
  idtiquete      Int
  estadoanterior EstadoTiquete 
  estadonuevo    EstadoTiquete 
  observacion    String?  @db.Text
  cambiadopor    Int     
  cambiadoen     DateTime @default(now())
  
  // Relaciones
  tiquete        Tiquete @relation(fields: [idtiquete], references: [id])
  usuarioCambio  Usuario @relation(fields: [cambiadopor], references: [id])
  imagenes       ImagenTiquete[]
  

}

model ImagenTiquete {
  id           Int      @id @default(autoincrement())
  idhistorial  Int
  rutaarchivo  String   @db.VarChar(500)
  subidopor    Int      
  subidoen     DateTime @default(now())
  
  // Relaciones
  historial    HistorialTiquete @relation(fields: [idhistorial], references: [id])
  usuario      Usuario @relation(fields: [subidopor], references: [id])
  

}

model Notificacion {
  id              Int      @id @default(autoincrement()) 
  tipo            TipoNotificacion
  idusuariodestino Int     
  idusuarioorigen Int?    
  idtiquete       Int?
  titulo          String   @db.VarChar(200)
  contenido       String   @db.Text
  estado          EstadoNotificacion @default(NO_LEIDA)
  creadaen        DateTime @default(now()) 
  leidaen         DateTime?
  
  // Relaciones
  usuarioDestino  Usuario @relation("NotificacionDestino", fields: [idusuariodestino], references: [id])
  usuarioOrigen   Usuario? @relation("NotificacionOrigen", fields: [idusuarioorigen], references: [id])
  tiquete         Tiquete? @relation(fields: [idtiquete], references: [id])
  

}

model ValoracionServicio {
  id           Int      @id @default(autoincrement())
  idtiquete    Int
  idcliente    Int
  calificacion Int
  comentario   String?  @db.VarChar(500)
  creadaen     DateTime @default(now())
  
  // Relaciones
  tiquete      Tiquete @relation(fields: [idtiquete], references: [id])
  cliente      Usuario @relation(fields: [idcliente], references: [id])
  

}

// Tablas de relaci√≥n many-to-many
model CategoriaEspecialidad {
  idcategoria     Int
  idespecialidad  Int
  
  // Relaciones
  categoria       Categoria @relation(fields: [idcategoria], references: [id])
  especialidad    Especialidad @relation(fields: [idespecialidad], references: [id])
  
  @@id([idcategoria, idespecialidad])

}

model CategoriaEtiqueta {
  idcategoria Int
  idetiqueta  Int
  
  // Relaciones
  categoria   Categoria @relation(fields: [idcategoria], references: [id])
  etiqueta    Etiqueta @relation(fields: [idetiqueta], references: [id])
  
  @@id([idcategoria, idetiqueta])
 
}

model UsuarioEspecialidad {
  idusuario        Int
  idespecialidad   Int
  nivelexperiencia NivelExperiencia 
  asignadoen       DateTime @default(now())
  
  // Relaciones
  usuario          Usuario @relation(fields: [idusuario], references: [id])
  especialidad     Especialidad @relation(fields: [idespecialidad], references: [id])
  
  @@id([idusuario, idespecialidad])

}

// Enums
enum RoleNombre {
  ADMIN
  TECNICO
  CLIENTE
}

enum Disponibilidad {
  DISPONIBLE
  OCUPADO
  AUSENTE
}

enum Prioridad {
  BAJA
  MEDIA
  ALTA
  CRITICA
}

enum EstadoTiquete {
  ABIERTO
  EN_PROGRESO
  PENDIENTE
  RESUELTO
  CERRADO
  CANCELADO
  ASIGNADO
}

enum TipoNotificacion {
  ASIGNACION
  CAMBIO_ESTADO
  MENSAJE
  RECORDATORIO
}

enum EstadoNotificacion {
  NO_LEIDA
  LEIDA
}

enum NivelExperiencia {
  JUNIOR
  INTERMEDIO
  SENIOR
  EXPERTO
}

enum MetodoAsignacion {
  MANUAL
  AUTOMATICO
  REGLA
}
